#!/usr/bin/env node

const fs = require("fs")
const path = require("path")

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const OUTPUT_FILE = "extension-combined.txt"

// –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –ß–ê–¢–£ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
const INCLUDE_DIRS = [
	"webview-ui/src/components/chat",
	"webview-ui/src/components/ui",
	"webview-ui/src/components/common",
	"webview-ui/src/components/kilocode",
	"webview-ui/src/utils",
	"webview-ui/src/context",
	"webview-ui/src/hooks",
	"webview-ui/src/lib",
]

const EXCLUDE_DIRS = [
	"node_modules",
	".git",
	"dist",
	"out",
	"build",
	".vscode",
	".husky",
	".changeset",
	".devcontainer",
	".github",
	".trunk",
	"coverage",
	"benchmark",
	"releases",
	"launch",
	"__tests__",
	"apps",
	"packages",
	"jetbrains",
	"scripts",
	".harvi",
	".kilocode",
]

const EXCLUDE_FILES = [
	".gitignore",
	".eslintrc.js",
	".eslintrc.json",
	".prettierrc.json",
	".prettierignore",
	"package-lock.json",
	"yarn.lock",
	"pnpm-lock.yaml",
	"turbo.json",
	"knip.json",
	"renovate.json",
	".DS_Store",
	"Thumbs.db",
	"*.log",
	"*.tmp",
	"*.temp",
	OUTPUT_FILE,
	"esbuild.mjs",
	"vite.config.ts",
	"vitest.config.ts",
	"tailwind.config.js",
	"postcss.config.js",
	"codicon.css",
	"codicon-custom.css",
	"icon-map.json",
	"components.json",
	"eslint.config.mjs",
	"index.html",
]

const EXCLUDE_DIRS_PATTERNS = [
	"locales", // –∏—Å–∫–ª—é—á–∞–µ–º –ø–∞–ø–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
	"i18n", // –∏—Å–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
	"default-themes", // –∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–º—ã
	"__mocks__", // –∏—Å–∫–ª—é—á–∞–µ–º –º–æ–∫–∏
]

const INCLUDE_EXTENSIONS = [
	".ts",
	".tsx",
	".js",
	".jsx",
	".json",
	".yml",
	".yaml",
	".css",
	".scss",
	".less",
	".html",
	".xml",
	".txt",
	".config.js",
	".config.ts",
	".mjs",
	".cjs",
]

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
function shouldExcludeDir(dirName) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
	if (EXCLUDE_DIRS.includes(dirName) || dirName.startsWith(".")) {
		return true
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
	for (const pattern of EXCLUDE_DIRS_PATTERNS) {
		if (dirName.includes(pattern)) {
			return true
		}
	}

	return false
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª
function shouldExcludeFile(fileName) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
	if (EXCLUDE_FILES.includes(fileName)) {
		return true
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
	for (const pattern of EXCLUDE_FILES) {
		if (pattern.includes("*")) {
			const regex = new RegExp(pattern.replace(/\*/g, ".*"))
			if (regex.test(fileName)) {
				return true
			}
		}
	}

	return false
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
function shouldIncludeFile(fileName, filePath = "") {
	// –î–ª—è —Ñ–∞–π–ª–æ–≤ —á–∞—Ç–∞ - –≤–∫–ª—é—á–∞–µ–º –≤—Å–µ .ts –∏ .tsx —Ñ–∞–π–ª—ã
	if (filePath.includes("components/chat")) {
		const ext = path.extname(fileName).toLowerCase()
		return ext === ".ts" || ext === ".tsx"
	}

	if (shouldExcludeFile(fileName)) {
		return false
	}

	// –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ –ø—É—Ç–∏
	if (
		fileName.includes(".nls.") ||
		fileName.includes("locales") ||
		fileName.includes("i18n") ||
		filePath.includes("/locales/") ||
		filePath.includes("/i18n/") ||
		filePath.includes("\\locales\\") ||
		filePath.includes("\\i18n\\")
	) {
		return false
	}

	const ext = path.extname(fileName).toLowerCase()
	return INCLUDE_EXTENSIONS.includes(ext) || fileName === "package.json" || fileName === "tsconfig.json"
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function walkDirectory(dir, basePath = "") {
	const files = []

	try {
		const items = fs.readdirSync(dir)

		for (const item of items) {
			const fullPath = path.join(dir, item)
			const relativePath = path.join(basePath, item)
			const stat = fs.statSync(fullPath)

			if (stat.isDirectory()) {
				if (!shouldExcludeDir(item)) {
					files.push(...walkDirectory(fullPath, relativePath))
				}
			} else if (stat.isFile()) {
				if (shouldIncludeFile(item, relativePath)) {
					files.push({
						path: relativePath,
						fullPath: fullPath,
					})
				}
			}
		}
	} catch (error) {
		console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}:`, error.message)
	}

	return files
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π
function isIncludedDir(dirPath) {
	const topLevelDir = dirPath.split(path.sep)[0]
	return INCLUDE_DIRS.includes(topLevelDir)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
function readFileContent(filePath) {
	try {
		return fs.readFileSync(filePath, "utf8")
	} catch (error) {
		return `[–û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø –§–ê–ô–õ–ê: ${error.message}]`
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
function getFileType(fileName) {
	const ext = path.extname(fileName).toLowerCase()
	const typeMap = {
		".ts": "typescript",
		".tsx": "typescript",
		".js": "javascript",
		".jsx": "javascript",
		".json": "json",
		".md": "markdown",
		".yml": "yaml",
		".yaml": "yaml",
		".css": "css",
		".scss": "scss",
		".less": "less",
		".html": "html",
		".xml": "xml",
		".svg": "xml",
		".txt": "text",
		".mjs": "javascript",
		".cjs": "javascript",
	}

	return typeMap[ext] || "text"
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
	console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä —Ñ–∞–π–ª–æ–≤ VSCode —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...")

	const startTime = Date.now()
	const rootDir = process.cwd()

	console.log(`üìÅ –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${rootDir}`)
	console.log(`üìÇ –í–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫–∏: ${INCLUDE_DIRS.join(", ")}`)

	// –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
	let files = []

	for (const includeDir of INCLUDE_DIRS) {
		const dirPath = path.join(rootDir, includeDir)
		if (fs.existsSync(dirPath)) {
			console.log(`üìÅ –°–∫–∞–Ω–∏—Ä—É–µ–º ${includeDir}/...`)
			files.push(...walkDirectory(dirPath, includeDir))
		} else {
			console.log(`‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${includeDir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ —Ñ–∞–π–ª—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
	const rootFiles = ["package.json", "tsconfig.json", "README.md", "CHANGELOG.md", "LICENSE"]
	for (const rootFile of rootFiles) {
		const filePath = path.join(rootDir, rootFile)
		if (fs.existsSync(filePath) && shouldIncludeFile(rootFile)) {
			files.push({
				path: rootFile,
				fullPath: filePath,
			})
		}
	}

	console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`)

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø—É—Ç–∏
	files.sort((a, b) => a.path.localeCompare(b.path))

	// –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
	let output = ""
	output += `# –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã VSCode —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è\n`
	output += `# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toISOString()}\n`
	output += `# –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${files.length}\n\n`

	// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
	for (let i = 0; i < files.length; i++) {
		const file = files[i]
		const fileType = getFileType(file.path)
		const content = readFileContent(file.fullPath)

		output += `## ${file.path}\n\n`
		output += `\`\`\`${fileType}\n`
		output += content
		output += `\n\`\`\`\n\n`

		if (i < files.length - 1) {
			output += `---\n\n`
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
		if ((i + 1) % 50 === 0 || i === files.length - 1) {
			console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${i + 1}/${files.length}`)
		}
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	try {
		fs.writeFileSync(OUTPUT_FILE, output, "utf8")
		const endTime = Date.now()
		const duration = ((endTime - startTime) / 1000).toFixed(2)

		console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${OUTPUT_FILE}`)
		console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}s`)
		console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(fs.statSync(OUTPUT_FILE).size / 1024 / 1024).toFixed(2)} MB`)

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
		const stats = {}
		for (const file of files) {
			const ext = path.extname(file.path).toLowerCase() || "no-extension"
			stats[ext] = (stats[ext] || 0) + 1
		}

		console.log("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤:")
		Object.entries(stats)
			.sort(([, a], [, b]) => b - a)
			.forEach(([ext, count]) => {
				console.log(`   ${ext}: ${count} —Ñ–∞–π–ª–æ–≤`)
			})
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:", error.message)
		process.exit(1)
	}
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
	main()
}

module.exports = { main }
