#!/usr/bin/env node

const { execSync } = require("child_process")
const fs = require("fs")
const path = require("path")

/**
 * –£–º–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –≤–µ—Ç–∫–∏ main
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Git merge —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
 * —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–º–µ–Ω–∞–º–∏ kilo/harvi, –æ—Å—Ç–∞–≤–ª—è—è —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
 */

function executeCommand(command, description, options = {}) {
	console.log(`\nüîÑ ${description}...`)
	console.log(`–í—ã–ø–æ–ª–Ω—è–µ–º: ${command}`)

	try {
		const output = execSync(command, {
			encoding: "utf8",
			stdio: options.silent ? "pipe" : "inherit",
			cwd: process.cwd(),
			...options,
		})
		console.log(`‚úÖ ${description} - —É—Å–ø–µ—à–Ω–æ`)
		return { success: true, output }
	} catch (error) {
		if (!options.allowFailure) {
			console.error(`‚ùå ${description} - –æ—à–∏–±–∫–∞:`)
			console.error(error.message)
		}
		return { success: false, error: error.message, output: error.stdout }
	}
}

function checkGitStatus() {
	try {
		const status = execSync("git status --porcelain", { encoding: "utf8" })
		if (status.trim()) {
			console.log("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
			console.log(status)
			console.log("\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏–ª–∏ —Å–ø—Ä—è—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.")

			const readline = require("readline")
			const rl = readline.createInterface({
				input: process.stdin,
				output: process.stdout,
			})

			return new Promise((resolve) => {
				rl.question("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ", (answer) => {
					rl.close()
					resolve(answer.toLowerCase() === "y" || answer.toLowerCase() === "yes")
				})
			})
		}
		return Promise.resolve(true)
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ git:", error.message)
		return Promise.resolve(false)
	}
}

function getCurrentBranch() {
	try {
		const branch = execSync("git branch --show-current", { encoding: "utf8" }).trim()
		return branch
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏:", error.message)
		return null
	}
}

async function performSmartMerge() {
	console.log("\n" + "=".repeat(50))
	console.log("üß† –£–ú–ù–û–ï –°–õ–ò–Ø–ù–ò–ï –° MAIN")
	console.log("=".repeat(50))

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
	if (!executeCommand("git fetch origin", "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π").success) {
		return false
	}

	// –ü—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π merge
	console.log("\nüìã –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–∏—è–Ω–∏—è...")
	const mergeResult = executeCommand("git merge origin/main --no-commit --no-ff", "–°–ª–∏—è–Ω–∏–µ —Å origin/main", {
		allowFailure: true,
	})

	if (mergeResult.success) {
		console.log("‚úÖ –°–ª–∏—è–Ω–∏–µ –ø—Ä–æ—à–ª–æ –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤!")
		executeCommand("git commit -m 'Merge from main'", "–ö–æ–º–º–∏—Ç —Å–ª–∏—è–Ω–∏—è")
		return true
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
	const statusResult = executeCommand("git status --porcelain", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞", { silent: true })
	if (!statusResult.success) {
		return false
	}

	const conflictedFiles = statusResult.output
		.split("\n")
		.filter((line) => line.startsWith("UU ") || line.startsWith("AA "))
		.map((line) => line.substring(3))

	if (conflictedFiles.length === 0) {
		console.log("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–ª–∏—è–Ω–∏–µ")
		executeCommand("git commit -m 'Merge from main'", "–ö–æ–º–º–∏—Ç —Å–ª–∏—è–Ω–∏—è")
		return true
	}

	console.log(`\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${conflictedFiles.length} —Ñ–∞–π–ª–æ–≤ —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏:`)
	conflictedFiles.forEach((file) => console.log(`   - ${file}`))

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
	let autoResolvedCount = 0
	const manualResolveFiles = []

	for (const file of conflictedFiles) {
		if (await tryAutoResolveConflict(file)) {
			autoResolvedCount++
			executeCommand(`git add "${file}"`, `–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ${file}`, { silent: true })
		} else {
			manualResolveFiles.push(file)
		}
	}

	console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤:`)
	console.log(`   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: ${autoResolvedCount}`)
	console.log(`   ‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${manualResolveFiles.length}`)

	if (manualResolveFiles.length > 0) {
		console.log(`\nüîß –§–∞–π–ª—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:`)
		manualResolveFiles.forEach((file) => console.log(`   - ${file}`))
		console.log(`\nüí° –ü–æ—Å–ª–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:`)
		console.log(`   git add .`)
		console.log(`   git commit -m "Merge from main"`)
		return false
	}

	// –í—Å–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
	executeCommand("git commit -m 'Merge from main with auto-resolved conflicts'", "–ö–æ–º–º–∏—Ç —Å–ª–∏—è–Ω–∏—è")
	return true
}

async function tryAutoResolveConflict(filePath) {
	try {
		const content = fs.readFileSync(filePath, "utf8")

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å kilo/harvi
		const conflictMarkers = content.match(/<<<<<<< HEAD[\s\S]*?=======[\s\S]*?>>>>>>> origin\/main/g)

		if (!conflictMarkers) {
			return false
		}

		let resolvedContent = content
		let allKiloHarviConflicts = true

		for (const conflict of conflictMarkers) {
			const lines = conflict.split("\n")
			const headStart = lines.findIndex((line) => line.startsWith("<<<<<<< HEAD"))
			const separator = lines.findIndex((line) => line.startsWith("======="))
			const mainEnd = lines.findIndex((line) => line.startsWith(">>>>>>> origin/main"))

			if (headStart === -1 || separator === -1 || mainEnd === -1) {
				allKiloHarviConflicts = false
				break
			}

			const ourVersion = lines.slice(headStart + 1, separator).join("\n")
			const theirVersion = lines.slice(separator + 1, mainEnd).join("\n")

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–º kilo/harvi
			const isKiloHarviConflict = isOnlyKiloHarviDifference(ourVersion, theirVersion)

			if (isKiloHarviConflict) {
				// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –≤–µ—Ä—Å–∏—é (—Å harvi)
				resolvedContent = resolvedContent.replace(conflict, ourVersion)
			} else {
				allKiloHarviConflicts = false
				break
			}
		}

		if (allKiloHarviConflicts) {
			fs.writeFileSync(filePath, resolvedContent, "utf8")
			console.log(`   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω: ${filePath}`)
			return true
		}

		return false
	} catch (error) {
		console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ ${filePath}:`, error.message)
		return false
	}
}

function isOnlyKiloHarviDifference(version1, version2) {
	// –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è kilo/harvi –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
	const normalize = (text) => {
		return text
			.replace(/kilo/gi, "PLACEHOLDER")
			.replace(/harvi/gi, "PLACEHOLDER")
			.replace(/Kilo/g, "PLACEHOLDER")
			.replace(/Harvi/g, "PLACEHOLDER")
			.replace(/KILO/g, "PLACEHOLDER")
			.replace(/HARVI/g, "PLACEHOLDER")
	}

	const normalized1 = normalize(version1)
	const normalized2 = normalize(version2)

	return normalized1.trim() === normalized2.trim()
}

async function main() {
	console.log("üöÄ –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –≤–µ—Ç–∫–∏ main")
	console.log("=".repeat(50))

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å git
	const canContinue = await checkGitStatus()
	if (!canContinue) {
		console.log("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
		process.exit(1)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
	const currentBranch = getCurrentBranch()
	if (!currentBranch) {
		console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É")
		process.exit(1)
	}

	console.log(`üìç –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: ${currentBranch}`)

	// –í—ã–ø–æ–ª–Ω—è–µ–º —É–º–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ
	const mergeSuccess = await performSmartMerge()

	if (mergeSuccess) {
		console.log("\n" + "=".repeat(50))
		console.log("üéâ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
		console.log("=".repeat(50))
		console.log("‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ main —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
		console.log("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã kilo/harvi —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
		console.log("\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:")
		console.log("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è: git log --oneline -5")
		console.log("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
	} else {
		console.log("\n" + "=".repeat(50))
		console.log("‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–û–ï –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–û")
		console.log("=".repeat(50))
		console.log("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
		console.log("–†–∞–∑—Ä–µ—à–∏—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–ª–∏—è–Ω–∏–µ")
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on("uncaughtException", (error) => {
	console.error("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error.message)
	process.exit(1)
})

process.on("unhandledRejection", (reason, promise) => {
	console.error("\n‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", reason)
	process.exit(1)
})

main().catch((error) => {
	console.error("\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", error.message)
	process.exit(1)
})
