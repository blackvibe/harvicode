#!/usr/bin/env node

const { execSync } = require("child_process")
const path = require("path")

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –≤–µ—Ç–∫–∏ main
 *
 * –ü—Ä–æ—Ü–µ—Å—Å:
 * 1. –ó–∞–ø—É—Å–∫–∞–µ—Ç harvi-to-kilo (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—ë –∫ kilo)
 * 2. –î–µ–ª–∞–µ—Ç merge –∏–∑ main
 * 3. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ merge —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç kilo-to-harvi
 */

function executeCommand(command, description) {
	console.log(`\nüîÑ ${description}...`)
	console.log(`–í—ã–ø–æ–ª–Ω—è–µ–º: ${command}`)

	try {
		const output = execSync(command, {
			encoding: "utf8",
			stdio: "inherit",
			cwd: process.cwd(),
		})
		console.log(`‚úÖ ${description} - —É—Å–ø–µ—à–Ω–æ`)
		return true
	} catch (error) {
		console.error(`‚ùå ${description} - –æ—à–∏–±–∫–∞:`)
		console.error(error.message)
		return false
	}
}

function checkGitStatus() {
	try {
		const status = execSync("git status --porcelain", { encoding: "utf8" })
		if (status.trim()) {
			console.log("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
			console.log(status)
			console.log("\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏–ª–∏ —Å–ø—Ä—è—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.")

			const readline = require("readline")
			const rl = readline.createInterface({
				input: process.stdin,
				output: process.stdout,
			})

			return new Promise((resolve) => {
				rl.question("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ", (answer) => {
					rl.close()
					resolve(answer.toLowerCase() === "y" || answer.toLowerCase() === "yes")
				})
			})
		}
		return Promise.resolve(true)
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ git:", error.message)
		return Promise.resolve(false)
	}
}

function getCurrentBranch() {
	try {
		const branch = execSync("git branch --show-current", { encoding: "utf8" }).trim()
		return branch
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏:", error.message)
		return null
	}
}

async function main() {
	console.log("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –≤–µ—Ç–∫–∏ main")
	console.log("=".repeat(50))

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å git
	const canContinue = await checkGitStatus()
	if (!canContinue) {
		console.log("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
		process.exit(1)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
	const currentBranch = getCurrentBranch()
	if (!currentBranch) {
		console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É")
		process.exit(1)
	}

	console.log(`üìç –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: ${currentBranch}`)

	// –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É –∑–∞–º–µ–Ω
	const replaceScript = path.join(__dirname, "replace.js")

	// –®–∞–≥ 1: –ó–∞–ø—É—Å–∫–∞–µ–º harvi-to-kilo
	console.log("\n" + "=".repeat(50))
	console.log("–®–ê–ì 1: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—ë –∫ kilo")
	console.log("=".repeat(50))

	if (!executeCommand(`node "${replaceScript}" harvi-to-kilo`, "–ó–∞–º–µ–Ω–∞ harvi ‚Üí kilo")) {
		console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–º–µ–Ω—É harvi-to-kilo")
		process.exit(1)
	}

	// –®–∞–≥ 2: –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑ main
	console.log("\n" + "=".repeat(50))
	console.log("–®–ê–ì 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –≤–µ—Ç–∫–∏ main")
	console.log("=".repeat(50))

	// –°–Ω–∞—á–∞–ª–∞ fetch –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
	if (!executeCommand("git fetch origin", "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π")) {
		console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ origin")
		process.exit(1)
	}

	// –ó–∞—Ç–µ–º merge
	if (!executeCommand("git merge origin/main", "–°–ª–∏—è–Ω–∏–µ —Å origin/main")) {
		console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å merge —Å main")
		console.error("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
		console.error("1. –†–∞–∑—Ä–µ—à–∏—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤—Ä—É—á–Ω—É—é")
		console.error("2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'git add .' –∏ 'git commit'")
		console.error("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
		process.exit(1)
	}

	// –®–∞–≥ 3: –ó–∞–ø—É—Å–∫–∞–µ–º kilo-to-harvi
	console.log("\n" + "=".repeat(50))
	console.log("–®–ê–ì 3: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—ë –∫ harvi")
	console.log("=".repeat(50))

	if (!executeCommand(`node "${replaceScript}" kilo-to-harvi`, "–ó–∞–º–µ–Ω–∞ kilo ‚Üí harvi")) {
		console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–º–µ–Ω—É kilo-to-harvi")
		console.error("\nüîß –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –≤—Ä—É—á–Ω—É—é:")
		console.error(`node "${replaceScript}" kilo-to-harvi`)
		process.exit(1)
	}

	// –§–∏–Ω–∞–ª
	console.log("\n" + "=".repeat(50))
	console.log("üéâ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
	console.log("=".repeat(50))
	console.log("‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ main —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
	console.log("‚úÖ –í—Å–µ –∑–∞–º–µ–Ω—ã kilo ‚Üí harvi –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
	console.log("\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:")
	console.log("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è: git status")
	console.log("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
	console.log("3. –ó–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on("uncaughtException", (error) => {
	console.error("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error.message)
	process.exit(1)
})

process.on("unhandledRejection", (reason, promise) => {
	console.error("\n‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", reason)
	process.exit(1)
})

main().catch((error) => {
	console.error("\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", error.message)
	process.exit(1)
})
